#    SPDX-FileCopyrightText: 2021 Monaco F. J. <monaco@usp.br>
#    SPDX-FileCopyrightText: 2024 Matheus Pereira Dias <matheuspd07@gmail.com>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later
#
#  This file is a derivative work from SYSeg (https://gitlab.com/monaco/syseg)
#  and contains modifications carried out by the following author(s):
#  Matheus Pereira Dias <matheuspd07@gmail.com>

 SysQuiz - A few quick questios.
 ==============================

 Some questions for your answer based on your knowledge of system software.
 Please, answer the questions in the file NOTEBOOK.

 

 Instructions
 ------------------------------

 The code examples in this directory include explanatory comments annotated
 directly in the source file comments. Those notes are complemented by the
 additional technical discussions provided in this README file.
 
 While some examples may be independent one from another, there may be also
 sequences of code snippets in which each example builds on its predecessor.
 In those cases, it may be interesting to go through the code examples in the
 same order they are introduced in the present README.
 
 For convenience, a build script (e.g. Makefile) may be provided which contains
 rules to compile, execute and inspect the contents of the source and object
 the examples are built and executed.


 Challenge
 ------------------------------

 Tip: Taking a look at the './Makefile' may be instructive.

 * p1.c      Explain the results.

   	     Build p1: make p1
		   
	     Execute it a few times and explain the results.
	     What is the rationale for this behavior.


 * p2.c	     Fix design vulnerability.

   	     Refer to p2.c and understand how the program works.

   	     Build p2: make p2

	     Execute the program and enter the correct input to pass the
	     verification check.

	     Then, rerun p2 and, when prompted, enter: youshallnotpass.
	     
	     Explain the result and identify the design flaw that led to the
	     vulnerability. Discuss possible modifications to make the program
	     more robust.

	     Now, rebuild the original p2 with

	        make CFLAGS=-fstack-protector p2

	     Test the program with the same string and see what happens.

	     Tip: yes, the compiler protects the stack with a canary but, as
	     you may have noticed, no stack smash seems to be detected. What
	     else happened and why, exactly, the program's behavior changed?

 * p3	     Explain the function calls.

   	     Check p3.c and build p3 with: make p3.

	     Disassemble p3:  make p3/d

	     Locate the function 'main' (search for <main>).
	     For gcc vr. 11.4.0 the output is like this. Yours may vary
	     slightly if your gcc version is not the same but should not
	     be too different:

	      0804918d <main>:
	      804918d:       55                push   %ebp
 	      804918e:       89 e5             mov    %esp,%ebp
 	      8049190:       83 e4 f0          and    $0xfffffff0,%esp
	      8049193:       e8 07 00 00 00    call   804919f <foo>
	      8049198:       b8 00 00 00 00    mov    $0x0,%eax
	      804919d:       c9                leave  
	      804919e:       c3                ret    

 	      0804919f <foo>:
 	      804919f:       55                push   %ebp
 	      80491a0:       89 e5             mov    %esp,%ebp
 	      80491a2:       83 ec 18          sub    $0x18,%esp
 	      80491a5:       8b 45 08          mov    0x8(%ebp),%eax
 	      80491a8:       83 c0 01          add    $0x1,%eax
 	      80491ab:       83 ec 0c          sub    $0xc,%esp
 	      80491ae:       50                push   %eax
 	      80491af:       e8 eb ff ff ff    call   804919f <bar>
 	      80491b4:       83 c4 10          add    $0x10,%esp
 	      80491b7:       89 45 f4          mov    %eax,-0xc(%ebp)
 	      80491ba:       8b 45 f4          mov    -0xc(%ebp),%eax
 	      80491bd:       c9                leave  
 	      80491be:       c3                ret    

	      080491bf <bar>:
 	      80491bf:       55                push   %ebp
 	      80491c0:       89 e5             mov    %esp,%ebp
 	      80491c2:       83 ec 10          sub    $0x10,%esp
 	      80491c5:       8b 45 08          mov    0x8(%ebp),%eax
 	      80491c8:       83 c0 01          add    $0x1,%eax
 	      80491cb:       89 45 fc          mov    %eax,-0x4(%ebp)
 	      80491ce:       8b 45 fc          mov    -0x4(%ebp),%eax
 	      80491d1:       c9                leave  
 	      80491d2:       c3                ret    

	     Examine the functions 'main', 'foo' and 'bar'.

	     a) Locate the line where 'foo' calls 'bar' and explain how the
	     	caller passes the parameter to the callee. In your answer,
		clarify the concepts of calling convention and application
		binary interface.

	     b) How 'bar' returns its result to 'foo'? How does the answer
	     	related to what you discussed in item (a)?

	     c) Explain what is the purpose of the first two instruction and
	     	the second-to-last instruction of the function 'foo'. What does
		it have to do with what you explained in item (a)?

	     d) What is the purpose of the third line in both functions 'foo'
	     	and 'bar' and what does it have to do with the x86 ABI? Does it
		serve the same purpose than the third line of 'main'?

             e) In the source code, change the return type of 'bar' to 'char'.
	     	Rebuild p3 and examine the difference in the disassembly of
		'foo'. Explain what the compiler did and, based on your answer,
		discuss why the declaration of 'foo' and 'bar' before 'main'
		are useful. 

 * p4	     How libraries work.

   	     Examine the source code of program 'p4.c' and see that all it does
	     it to call the function 'foo', implemented in the custom library
	     'libp4', which, in turn, is available in both static and dynamic
	     versions.


	     The 'Makefile' in this directory provides three forms of building
	     'p4': passing all objects explicitly to the link editor; passing
	     the static library; and passing the dynamic library. You can build
	     all three versions by running, respectively

	        make p4-v1
		make p4-v2
		make p4-v3

	     Compare the tree version with respect to the following aspects.

	     a) Execute each program and comment the results.
	     
	     b) Compare the size of all programs and explain the differences.
	     
	     c) Inspect all the programs with 'nm <program>' and discuss the
	     	differences in when and how the symbols 'foo' and 'bar' are
		listed. Tip, read the 'man page' of 'nm' and interpret the
		letters in the second column.

	     d) Inspect all the programs with 'readelf -d <program>' and discuss
	     	the differences in the library information. How the 'Shared
		library' field is used by the kernel when 'p4-v3' is loaded?

	     e) Discuss the pros and cons of both static and dynamic libraries
	     	in scenarios such as a) the executable program should be
		installed in other hosts; b) the library is updated; c) the
		library should be used by many different programs running in
		the same host.

 
 Directions for the exercise
 ------------------------------

 1) Create your project.

 Unless otherwise specified by your instructor (in case you are using this
 material as part of a trainning program), SYSeg suggests that you deliver the
 solution of your implementation challange by commiting your work into a Git
 repository.

 If you haven't aready done it yet, please go through the following steps;
 otherwise, skip this part and proceed directly to item (2).
 
 Create your remote mainstream repository as indicated by the instructor and
 git-clone it into your local development environment.

 If your repository name is, say, 'proj', then, to bootstrap your project, run
 this command at the shell prompt:
 
    $ <path-to-syseg>/tools/syseg-project <path-to-proj>

 Well done, your project directory should be now populated with some essential
 data files and auxiliary scripts that you should use to develop the
 implementation challange.

 Read the newly created 'README' file and proceed as indicated.

 2) Export the exercise files into your project directory.

 Say the exercise is in a directory named 'foo', under the SYSeg source tree.

 Within directory 'foo', execute the command:

    $ make export             

 The command should create a tarball containing the project files.

 Uncompress the tarball contents into your project directory:

    $ tar zxvf foo.tgz -C <path-to-proj> 
 
 That will create a directory '<path-to-proj>/foo'.

 Note: if you are ever requested to update the exercise files --- say, because
 your instructor has changed anything --- you can git-push SYSeg to fetch the
 latest changes, make-export your exercise, and uncompress it again into your
 project directory using the command

    $ tar zxvfk foo.tgz -C <path-to-proj>

 (Note the 'k' option that prevents tar from overwriting existing files.)

 To complete the programming exercise, proceed as indicated in both this file
 and the complementary comments in the exercise source code.

 **Attention** do not simply copy the SYSeg files to your project.
 
     Some programs, build scrips, configuration files etc. may be
     heavily dependent on other parts of SYSeg and have not being
     designed to work properly if not in conjunction with those
     other files. If you merely copy files, they may well be incomplete.
     The syseg-export program should be used to export the SYSeg code
     into a standalone bundle. The 'make export' rule will collect the
     required files, and possibly modify them as needed to work outside
     the SYSeg project tree. Moreover, syseg-export will also modify
     the copyright notices in the form suitable for a derivative work.

  Should you intend to reuse any other file from SYSeg, please use the command

     $ <path-to-syseg>/tools/syseg-export <input-file> <destination-directory>

  The scritpt will export SYSeg files in a format suitable to be reused by
  external projects.

 3) Develop the implementation challenge.

 Start by reading '<path-to-proj>/.tools/readme.md', which will walk you
 through the steps to develop the program exercise.

 It's very important that you follow the directions given in that guide, should
 you or your instructor expect to use the SYSeg automatic test and verification
 tools to evaluate your implementation.

 SYSeg provides scripts for creating new source files, export code from SYSeg
 to your project, handle copyright information and other tasks.

 Finally, deliver your project as instructed.

 Within the exercise directory you should find a file named  'SOLVING' or
 'NOTEBOOK´, which you should use as a  laboratory notebook for you to explain
 how you solved the implementation challenge, including annotations about the
 results, limitations and difficulties you may have found.



 How to deliver the exercise
 ------------------------------
  
 If you're exploring the exercise as part of a training program, chances are
 that your instructor is following the delivery workflow suggested by SYSeg. If
 that is the case, then, when you're done with the activity, you should be
 asked to upload your work into a repository managed by a version-control
 system (VCS) --- most probably Git.

 For this purpose, you must have already created your online repository in the
 recommended platform (e.g. GitHub or GitLab), cloned it, and then copied the
 exercise files into the directory of your project using the proper helper
 scripts provided by SYSeg.
 
 To deliver your programming exercise just commit your changes and push them
 into to the mainstream repository.
 

 You may commit partial changes even before completing the exercise. That may
 be a convenient way to share ideas and ask for help. Opening an issue in the
 repository with your question may be an effective way to ask for help.
 

 When you believe your work is complete, mark your final revision with a
 tag. Unless the exercise specification informs differently, use the tag
 '<dir>-done', where '<dir>' is the name of the directory containing the
 project. If you need to submit a revision after that, use the
 tag '<dir>-rev1', '<dir>-rev2' and so on.
 
 To tag your delivery:

     $ git tag <dir>-done
     $ git push origin <dir>-done

 The instructor will know you are finished with the exercise.

 Note: please, commit only source files, i.e. don't commit object files and
 other items that can be generated by the build process).
  


 
 

 Bintools: convenience rules for inspecting binary files
 ------------------------------------------------------------
 
 SYSeg's Bintools is a collection of Makefile rules aimed as shortcut for
 invoking binary inspection utilities. It contains handy Make rules for
 disassembling objects, comparing files, creating bootable images, invoking
 platform emulators and other facilities. Some shortcuts are ad hoc rules
 crafted under poetic license and may depart from conventional Make usage.

 CONVENTIONS
 
 As a rule of thumb, a file named

     foo.bar            contains the working implementation
     foo-beta.bar	contains working but cumbersome/inelegant implementation
     foo-alpha.bar	contains incomplete or wrong implementation

 File extensions:

   -`hex`  ASCII file containing values in hexadecimal representation;

   -`asm`  manually written assembly code in Intel ASM format;

   -`S`    manually written assembly code in AT&T Gas format;

   -`s`    assembly code in AT&T Gas format generated by the compiler (gcc);

   -`o`    object code produced by the assembler;

   -`i`    pre-processed source code generated by the pre-processor (CPP)

   -`bin`  flat-binary file generated by the linker;

   -`iso`  ISO9660 (ECMA-119) file system intended for optical disk media (CD) 

   -`ld`   linker script (ld).


 Some examples allow alternative build recipes which can be selected
 by passing the command-line variable 'ALT=<number>' to 'make'. See bellow.

 NEEDED SOFTWARE

 In order to experiment with the examples in this section, the following
 pieces of software may be needed. The list indicates the lowest versions
 against which the project has been tested. Using a more recent version should
 be ok, but it is not absolutely guaranteed that results won't exhibit minor
 variations. Feedback is always appreciated.

 If required for a particular example, it is safe to use

 - Linux         5.13.0         (any decent ditribution)
 - gcc 	     	 9.3.0	        (the GNU compiler)
 - GNU binutils  2.34		(GNU assembler, linker, disassembler etc.) 
 - nasm		 2.14.02	(NASM assembler)
 - qemu		 4.2.1		(most probably qemu-system-i386)
 - gcc-multilib  9.3.0		(to compile 32-bit code in a 64-bit platform)
 - xorriso	 1.5.2-1	(depending on your computer's BIOS)
 - hexdump	 POSIX.2	(binary editor)
 
 CONVENIENCE RULES 


 * For building and inspecting binaries, use

   make					     Build the default target.

   make foo				     Build foo.

   make diss IMG=foo 			     Disassemble foo.

   	     	     			     Optionally,

					        ASM  = intel | att  (default)
						BIT  =    16 | 32   (default)

   make dump IMG=foo			     Show the raw contents of foo.
   
   make      			             Build everything (or make all)

   make clean			             Undo make all

   make diff foo bar baz		     Show graphical diff between files

   	     	     			     ASM and BIT variables apply


  * If any example involves the manipulation of a bootable image, use
  

   make run IMG=foo	             	     Run foo in the emulator

   make stick IMG=foo DEVICE=/dev/sdX        make a bootable USB stick


   SHORTCUTS

   For further convenience, the build script offers some ad hoc shortcuts:
   

   make foo/diss | foo/d		     disassemble .text as 32-bit AT&T

   make foo/diss intel|att		     disassemble as 32-bit Intel or AT&T
   make foo/diss 16|32			     disassemble as 16-bit or 32-bit
   make foo/diss intel|att 16|32	     disassemble as Intel|AT&T 16|32 bit
   make foo/diss 16|32 intel|att	     disassemble as Intel|AT&T 16|32 bit

   make foo/i16	       			     disassemble as Intel 16-bit
   make foo/a16 | foo/16  		     disassemble as AT&T  16-bit
   make foo/a32	| foo/32 | foo/a     	     disassemble as AT&T  32-bit
   make foo/i32	         | foo/i	     disassemble as Intel 32-bit

   		   			     In all disassembly rules, a
					     trailing '*' means disassemble all
					     sections, e.g. foo/d* foo/16* ...

   make foo/hex | foo/raw | foo/dump	     show raw contents in hexadecimal

   make foo/run				     test foo (mbr) with the emulator
   make foo/fd				     test foo (floppy) with the emulator

   make diffi16 | di16 | i16 foo bar baz     make diff with ASM=intel BIT=16
   make diffi32 | di32 | i32 foo bar baz     make diff with ASM=intel BIT=32
   make diffa16 | da16 | a16 foo bar baz     make diff with ASM=att BIT=16
   make diffa32 | da32 | a32 foo bar baz     make diff with ASM=att BIT=32

   make foo/stick dev    	   	     make stick IMG=foo DEVICE=dev

   make foo/l	  			     open foo in 'less' program

 

